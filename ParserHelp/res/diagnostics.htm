<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML//EN">
<HTML>
<HEAD>
<meta name="GENERATOR" content="Microsoft&reg; HTML Help Workshop 4.1">
<TITLE>Диагностика и нейтрализация ошибок</TITLE>
</HEAD>
<BODY>

<h1>Диагностика и нейтрализация ошибок в разборе READ</h1>

<h2>Метод Айронса</h2>
<p>Для грамматики G[&lt;R&gt;] (правила 1–9) применяется <strong>адаптированный метод Айронса</strong>. При обнаружении несоответствия парсер не прерывает работу, а пытается «восстановиться» и продолжить разбор, избегая немедленного завершения с ошибкой.</p>

<h2>Токенизация входной строки</h2>
<p>Входная строка разбивается на следующие токены:</p>
<ul>
    <li><code>READ</code></li>
    <li>Скобки: <code>(</code> и <code>)</code></li>
    <li>Символы формата: <code>*</code></li>
    <li>Разделители: <code>,</code> и <code>;</code></li>
    <li>Идентификаторы: <code>letter</code> и <code>digit</code></li>
</ul>

<h2>Методы обработки ошибок</h2>

<h3>1. Удаление токенов (panic-skip)</h3>
<p>Если текущий токен не соответствует ожидаемому, анализатор пропускает его и продолжает разбор со следующего:</p>
<ul>
    <li>Игнорирование неожиданных символов</li>
    <li>Пропуск лишних разделителей или скобок</li>
</ul>

<h3>2. Вставка токенов</h3>
<p>Если ожидаемый токен отсутствует (например, в конце ввода), он логически вставляется на текущую позицию без перехода к следующему токену:</p>
<ul>
    <li>Добавление пропущенной закрывающей скобки</li>
    <li>Добавление точки с запятой <code>;</code> в конце конструкции</li>
    <li>Вставка пропущенной запятой между переменными</li>
</ul>

<h3>3. Замена токенов</h3>
<p>Если ни вставка, ни удаление не помогают, текущий токен заменяется на нужный и анализ продолжается:</p>
<ul>
    <li>Заменяется неверный символ формата (например, <code>?</code> на <code>*</code>)</li>
    <li>Неверный идентификатор заменяется на валидный</li>
</ul>

<h2>Follow-множества и синхронизация</h2>
<p>Для каждого нетерминала определено <strong>follow-множество</strong> синхронизирующих токенов. Если корректировка не удалась, анализатор пропускает токены до ближайшего символа из множества, чтобы избежать зацикливания.</p>

<h2>Журнал ошибок</h2>
<p>Все действия по исправлению ошибок (удаление, вставка, замена) записываются в <strong>журнал парсера</strong> с указанием:</p>
<ul>
    <li>позиции в строке</li>
    <li>типа корректировки</li>
    <li>ожидаемого и фактического токена</li>
</ul>

<h2>Примеры исправлений</h2>
<table border="1" cellpadding="5" cellspacing="0">
    <tr>
        <th>Ошибочный ввод</th>
        <th>Действие парсера</th>
    </tr>
    <tr>
        <td><code>READ(***);</code></td>
        <td>Заменен лишний <code>*</code> на <code>,</code> — <code>READ(*,*)</code></td>
    </tr>
    <tr>
        <td><code>READ(*,);</code></td>
        <td>Вставлена <code>*</code> - <code>READ(*,*)</code></td>
    </tr>
    <tr>
        <td><code>READ(* a b c</code></td>
        <td>Вставлена закрывающая скобка, звездочка и точка с запятой: <code>)</code>, <code>*</code> и </<code>;</code></td>
    </tr>
</table>

<h2>Этапы восстановления</h2>
<ol>
    <li>Обнаружение ошибки в токенах</li>
    <li>Попытка коррекции (вставка, удаление, замена)</li>
    <li>Проверка принадлежности к follow-множеству</li>
    <li>Продолжение разбора с новой позиции</li>
    <li>Запись действия в журнал</li>
</ol>

</BODY>
</HTML>
